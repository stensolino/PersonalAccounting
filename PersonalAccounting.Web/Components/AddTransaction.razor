@inject ITransactionsService transactionService

<div class="row">
    <div class="col-sm-12">
        <h3>Add Transaction</h3>

        <EditForm Model="@Transaction" OnValidSubmit="@HandleValidSubmit">
            <div class="form-group row">
                <label for="date" class="col-sm-2 col-form-label">Date</label>
                <div class="col-sm-10">
                    <InputDate id="date" @bind-Value="@Transaction.Date" class="form-control col-sm-8"></InputDate>
                </div>
            </div>

            <div class="form-group row">
                <label for="category" class="col-sm-2 col-form-label">Category</label>
                <div class="col-sm-10">
                    <InputSelect id="category" @bind-Value="@CategoryId" class="form-control col-sm-8">
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="form-group row">
                <label for="note" class="col-sm-2 col-form-label">Note</label>
                <div class="col-sm-10">
                    <InputText id="note" @bind-Value="@Transaction.Note" class="form-control col-sm-8" placeholder="Note"></InputText>
                </div>
            </div>

            <div class="form-group row">
                <label for="amount" class="col-sm-2 col-form-label">Amount</label>
                <div class="col-sm-10">
                    <InputNumber id="amount" @bind-Value="@Transaction.Amount" class="form-control col-sm-8"></InputNumber>
                </div>
            </div>

            <button type="submit" class="btn btn-primary mb-2">Save</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public List<Category> Categories { get; set; }
    protected string CategoryId = string.Empty;

    public Transaction Transaction { get; set; } = new Transaction { Category = new Category() };

    protected override void OnInitialized()
    {
        var defaultCategory = Categories.FirstOrDefault();

        if (defaultCategory is { })
        {
            Transaction.Category = defaultCategory;
            Transaction.CategoryId = defaultCategory.Id;
            CategoryId = defaultCategory.Id.ToString();
        }

        Transaction.Date = DateTime.Now;

    }

    protected async Task HandleValidSubmit()
    {
        try
        {
            if (int.TryParse(CategoryId, out var choosenCategoryId))
            {
                var choosenCategory = Categories.FirstOrDefault(c => c.Id == choosenCategoryId);
                if (choosenCategory is { })
                {
                    Transaction.CategoryId = choosenCategory.Id;
                    Transaction.Category = choosenCategory;
                }
            }

            await transactionService.Insert(Transaction);
        }
        catch (Exception ex)
        {

            throw;
        }
    }
}
