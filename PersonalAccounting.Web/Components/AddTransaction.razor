@inject ITransactionsService transactionService

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Add Transaction</h5>
        <ul class="list-group list-group-flush mt-4">
            <EditForm Model="@Transaction" OnValidSubmit="@HandleValidSubmit">
                <div class="form-group row">
                    <label for="date" class="col-sm-4 col-form-label">Date</label>
                    <div class="col-sm-8">
                        <InputDate id="date" @bind-Value="@Transaction.Date" class="form-control"></InputDate>
                    </div>
                </div>

                <div class="form-group row">
                    <label for="category" class="col-sm-4 col-form-label">Category</label>
                    <div class="col-sm-8">
                        <InputSelect id="category" @bind-Value="@CategoryId" class="form-control">
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="form-group row">
                    <label for="note" class="col-sm-4 col-form-label">Note</label>
                    <div class="col-sm-8">
                        <InputText id="note" @bind-Value="@Transaction.Note" class="form-control" placeholder="Note"></InputText>
                    </div>
                </div>

                <div class="form-group row">
                    <label for="amount" class="col-sm-4 col-form-label">Amount</label>
                    <div class="col-sm-8">
                        <InputNumber id="amount" @bind-Value="@Transaction.Amount" class="form-control"></InputNumber>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary mb-2 float-right">Save</button>
            </EditForm>
        </ul>
    </div>
</div>

@code {
    [Parameter] public EventCallback ReloadParent { get; set; }
    [Parameter] public int BudgetId { get; set; }
    [Parameter] public List<CategoryDto> Categories { get; set; }
    protected string CategoryId = string.Empty;
    public TransactionDto Transaction { get; set; } = new TransactionDto();

    protected override void OnInitialized()
    {
        SetDefaulTransaction();
    }

    protected async Task HandleValidSubmit()
    {
        try
        {
            if (int.TryParse(CategoryId, out var choosenCategoryId))
            {
                var choosenCategory = Categories.FirstOrDefault(c => c.Id == choosenCategoryId);
                if (choosenCategory is { })
                {
                    Transaction.CategoryId = choosenCategory.Id;
                    Transaction.CategoryName = choosenCategory.Name;
                }
            }

            await transactionService.InsertTransaction(Transaction);
            await ReloadParent.InvokeAsync("");
            SetDefaulTransaction();
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    protected void SetDefaulTransaction()
    {
        Transaction = new TransactionDto();

        Transaction.Date = DateTime.Now;
        var defaultCategory = Categories.FirstOrDefault();

        if (defaultCategory is { })
        {
            Transaction.CategoryName = defaultCategory.Name;
            Transaction.CategoryId = defaultCategory.Id;
            Transaction.BudgetId = BudgetId;
            CategoryId = defaultCategory.Id.ToString();
        }
    }
}
